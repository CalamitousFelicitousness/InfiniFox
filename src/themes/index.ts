/**
 * InfiniFox Theme Engine
 * Central export for the complete theme system
 */

// Import and export ThemeProvider and context
import {
  useThemeTokens,
  useToken,
  useBreakpoint,
  useMediaQuery,
  useResponsive,
  useUserPreferences,
  useThemeStyles,
  useComponentVariant,
  useCSSVariable,
  useContrastColor,
} from './hooks'
import { ThemeProvider, ThemeContext, useTheme } from './ThemeProvider'
// Import and export all hooks
// Import and export themes
import { baseTheme } from './themes/base'
import { darkTheme, darkThemeOverrides } from './themes/dark'
import { lightTheme, lightThemeOverrides } from './themes/light'
import { generateAllCSSVariables } from './tokens'
import type { Theme } from './types'

// Export all tokens
export * from './tokens'
// Export types
export * from './types'

export { ThemeProvider, ThemeContext, useTheme }

export {
  useThemeTokens,
  useToken,
  useBreakpoint,
  useMediaQuery,
  useResponsive,
  useUserPreferences,
  useThemeStyles,
  useComponentVariant,
  useCSSVariable,
  useContrastColor,
}

export {
  useThemeTransition,
  useSystemTheme,
  useThemePersistence,
  useThemeShortcuts,
} from '../hooks/useThemeTransition'

export { baseTheme, darkTheme, darkThemeOverrides, lightTheme, lightThemeOverrides }

// Create a function to generate the CSS file content
export function generateTokenCSS(): string {
  return `/**
 * InfiniFox Token Variables
 * Auto-generated CSS variables from design tokens
 * DO NOT EDIT MANUALLY - Generated by theme engine
 */

${generateAllCSSVariables()}
`
}

// Theme utilities
export const themeUtils = {
  /**
   * Merge multiple themes together
   */
  mergeThemes: (...themes: Partial<Theme>[]) => {
    return themes.reduce(
      (acc, theme) => ({
        ...acc,
        ...theme,
        colors: { ...acc.colors, ...theme.colors },
        typography: { ...acc.typography, ...theme.typography },
        spacing: { ...acc.spacing, ...theme.spacing },
        shadows: { ...acc.shadows, ...theme.shadows },
        animations: { ...acc.animations, ...theme.animations },
        borders: { ...acc.borders, ...theme.borders },
        breakpoints: { ...acc.breakpoints, ...theme.breakpoints },
        custom: { ...acc.custom, ...theme.custom },
      }),
      {}
    )
  },

  /**
   * Create a theme variant
   */
  createVariant: (base: Partial<Theme>, variant: Partial<Theme>) => {
    return themeUtils.mergeThemes(base, variant)
  },

  /**
   * Validate theme structure
   */
  validateTheme: (theme: unknown): boolean => {
    const requiredFields = ['name', 'mode', 'colors', 'typography', 'spacing']
    return requiredFields.every((field) => field in theme)
  },

  /**
   * Get contrast color for a background
   */
  getContrastColor: (backgroundColor: string): string => {
    // Simple luminance calculation
    const rgb = backgroundColor.match(/\d+/g)
    if (!rgb || rgb.length < 3) return 'white'

    const [r, g, b] = rgb.map(Number)
    const luminance = (0.299 * r + 0.587 * g + 0.114 * b) / 255

    return luminance > 0.5 ? 'black' : 'white'
  },

  /**
   * Get a specific shade of a color
   */
  getColorShade: (color: string, shade: number): string => {
    // This would need to be implemented based on your color system
    return `var(--color-${color}-${shade})`
  },

  /**
   * Create responsive value object
   */
  responsive: <T>(values: Partial<Record<string, T>>): Record<string, T> => {
    return values as Record<string, T>
  },
}

// Default export
export default {
  ThemeProvider,
  useTheme,
  useThemeTokens,
  darkTheme,
  generateTokenCSS,
  themeUtils,
}
